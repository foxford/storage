apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "storage.fullname" . }}
  labels:
    {{- include "storage.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  minReadySeconds: {{ .Values.minReadySeconds }}
  selector:
    matchLabels:
      {{- include "storage.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/app-cm: {{ include (print $.Template.BasePath "/app-cm.yaml") . | sha256sum }}
      labels:
        {{- include "storage.labels" . | nindent 8 }}
    spec:
      imagePullSecrets:
        - name: regcred
      initContainers:
        - image: "{{ .Values.networkTester.image.repository }}:{{ .Values.networkTester.image.tag }}"
          imagePullPolicy: IfNotPresent
          name: network-tester
        {{- if .Values.maxmind }}
        - image: amazon/aws-cli:2.12.6
          imagePullPolicy: IfNotPresent
          name: maxminddb-download
          command: ["/bin/sh"]
          args:
            - -c
            - aws s3 cp --endpoint="${AWS_ENDPOINT}" --only-show-errors {{ .Values.maxmind.path }} maxmind.tar.gz;
            - tar -xf ./maxmind.tar.gz;
            - cp `find . -type f -name "*.mmdb"` /maxmind/maxmind.mmdb;
          volumeMounts:
          - name: maxmind
            mountPath: "/maxmind"
          env:
            {{- range $key, $value := .Values.app.s3 }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secret }}
                  key: key
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secret }}
                  key: secret
            - name: AWS_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secret }}
                  key: endpoint
            - name: AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secret }}
                  key: region 
            {{- end }}
        {{- end }}
      containers:
        - name: storage
          image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}"
          ports:
            - containerPort: {{ .Values.clusterService.ports.http }}
          volumeMounts:
            - name: config
              mountPath: /app/App.toml
              subPath: App.toml
            {{- if .Values.maxmind }}
            - name: maxmind
              mountPath: /app/maxmind.mmdb
              subPath: maxmind.mmdb
            {{- end }}
            {{- with .Values.app.svc }}
            {{- $audience := .audience }}
            {{- range $secret, $mounts := .credentials }}
            {{- range $mounts }}
            - name: {{ include "storage.volumeMountName" (list $audience $secret) }}
              mountPath: {{ .mountPath }}
              subPath: {{ .subPath }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- range .Values.app.audiences }}
            {{- $audience := .audience }}
            {{- range $secret, $mounts := .credentials }}
            {{- range $mounts }}
            - name: {{ include "storage.volumeMountName" (list $audience $secret) }}
              mountPath: {{ .mountPath }}
              subPath: {{ .subPath }}
            {{- end }}
            {{- end }}
            {{- end }}
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | default "" | quote }}
            {{- end }}
            {{- if eq ( get .Values.env "CACHE_ENABLED" | int ) 1 }}
            - name: CACHE_URL
              valueFrom:
                secretKeyRef:
                  name: redis-storage-credentials
                  key: CACHE_URL
            {{- end }}
            {{- range $key, $value := .Values.app.s3 }}
            - name: {{ list $key "AWS_ACCESS_KEY_ID" | compact | join "_" | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secret }}
                  key: key
            - name: {{ list $key "AWS_SECRET_ACCESS_KEY" | compact | join "_" | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secret }}
                  key: secret
            - name: {{ list $key "AWS_ENDPOINT" | compact | join "_" | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secret }}
                  key: endpoint
            - name: {{ list $key "AWS_REGION" | compact | join "_" | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secret }}
                  key: region
            {{- end }}
          resources:
            {{- toYaml .Values.app.resources | nindent 12 }}
          startupProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.clusterService.ports.http }}
            failureThreshold: 10
            periodSeconds: 3
          lifecycle:
            preStop:
              exec:
                command: ["sleep", "{{ .Values.preStopSleepSeconds }}"]
      volumes:
        {{- if .Values.maxmind }}
        - name: maxmind
          emptyDir: {}
        {{- end }}
        - name: config
          configMap:
            name: {{ include "storage.fullname" . }}-app
        {{- with .Values.app.svc }}
        {{- $audience := .audience }}
        {{- range $secret, $mounts := .credentials }}
        - name: {{ include "storage.volumeMountName" (list $audience $secret) }}
          secret:
            secretName: {{ $secret }}
        {{- end }}
        {{- end }}
        {{- range .Values.app.audiences }}
        {{- $audience := .audience }}
        {{- range $secret, $mounts := .credentials }}
        - name: {{ include "storage.volumeMountName" (list $audience $secret) }}
          secret:
            secretName: {{ $secret }}
        {{- end }}
        {{- end }}
